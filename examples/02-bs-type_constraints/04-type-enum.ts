///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/**
 * 枚举类型         // 最终以 对象的形式 出现在编译结果中
 *
 *
 * 枚举通常用于约束某个变量的取值范围        // 字面量和联合类型配合使用，也可以达到同样的效果
 */


/**
 * // 字面量和联合类型配置使用中存在的问题
 *
 * 1) 在类型约束位置，会产生重复代码( 可以使用类型别名解决该问题 )
 *
 * 2) "逻辑含义" 和 "真实的值" 产生了混淆，导致当修改真实值时，产生大量修改( 需要修改工程中多处 )
 *
 * 3) 字面量类型不会进入到编译结果中( ts仅在开发阶段有效，实际编译用的是转译后的 js )
 */


//-------------------------------------------------------------------------------------------------------------------//


/** 不会出现在最终的编译结果中 **/
type GenderType = 'male' | 'female';


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//


/**
 * enum [name] { key: val ...}
 *
 *
 * @val: string | number;
 **      枚举的字段值，仅可以是 "字符串" 或 "数字"
 *
 */

/** 会出现在编译结果中  **/
enum GenderEnum {
    key1 = 'val1',
    key2 = 'val2',
    key3 = 'val3'
}

// var GenderEnum;
// (function (GenderEnum) {
//     GenderEnum["key1"] = "val1";
//     GenderEnum["key2"] = "val2";
//     GenderEnum["key3"] = "val3";
// })(GenderEnum || (GenderEnum = {}));


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//


/**
 * number enum
 *
 *
 ** 默认为数字枚举
 ** 数字枚举的值 会自增 ( 从 零 开始 )
 ** 被数字枚举约束的变量可直接赋值为其他数字( 慎用 )      // 使用逻辑名称
 */

enum Level {
    level1,
    level2,
    level3,
}

console.log(Level.level1);          // 0
console.log(Level.level2);          // 1
console.log(Level.level3);          // 2


/** 数字枚举的值会自增 **/
// enum Level {
//     level1 = 2,
//     level2,                  // 3
//     level3,                  // 4
// }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
