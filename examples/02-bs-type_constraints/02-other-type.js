///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 其他类型约束
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//
/** 联合类型: type1 | type2 | ... 多种类型任选其一 **/
let myName; // 设置联合类型
// myName.trim();                               // 此时无法判读该类型
if (typeof myName === 'string') { // 类型判断( 如何触发 类型保护，后续深入 )
    /** 类型判断后自动添加 类型保护 **/
    myName = 'alpha'; // 此时该类型保护为 string
}
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//
/** void: 通常用于约束函数的返回值，表示该函数没有任何返回值 **/
function returnVoid() {
    let res = '该函数无任何返回值';
}
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//
/** never: 通常用于约束函数的返回值，表示该函数用于不会结束 **/
function neverReturn(msg) {
    throw new Error(msg);
}
// function alwaysDoSomething(): never {
//
//     while (true) {
//
//         // ...
//     }
// }
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//
/** 子面量类型:  **/
let firstName; // 字面量约束为 字符串，并且只能取值为 空字符串
let age; // 子棉量约束为 数字，并且只能为 18
let arr; // 字面量约束为 数组，并且只能为 空数组
let gender; // 字面量约束为 字符串，并且只能取值为 'male' || 'female'
let userInfo;
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//
/** 元组类型( Tuple ): 用于约束固定长度的数组，并且约束数组中每个子项的类型 **/
let tupleArr;
tupleArr = [9527, 'star'];
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -//
/** any类型: 可以绕过约束类型检查，any 可以赋值给任何类型 **/
let data = ''; // 该赋值具有风险，谨慎使用
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
